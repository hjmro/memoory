{"ast":null,"code":"var _jsxFileName = \"/Users/hans.jorgen.ro/Documents/GitHub/memoory/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './Components/Board';\nimport { shuffle } from './helpers.js';\nimport defaultCards from './initialData';\nconst ambience = new Audio(\"static/Sounds/Ambience.mp3\");\nconst reward = new Audio(\"static/Sounds/Reward.mp3\");\n\nconst generateStartingDeck = () => {\n  //Todo generate random cards \n  return shuffle(defaultCards);\n};\n\nfunction App() {\n  const [flippedCards, setFlippedCard] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [cards, setCards] = useState([]);\n  const [showGame, setShowGame] = useState(false);\n  const [timesWon, setTimesWon] = useState(0);\n\n  const handleClickCard = id => {\n    if (flippedCards.length < 2) {\n      setFlippedCard([...flippedCards, id]);\n    }\n  };\n\n  const checkCardMatch = (id1, id2, cards) => {\n    const card1 = cards.find(card => card.id === id1);\n    const card2 = cards.find(card => card.id === id2);\n    console.log(\"matchingCards\", card1, card2, card1.name === card2.name);\n    return card1.name === card2.name;\n  }; // Main game loop\n\n\n  useEffect(() => {\n    console.log(cards);\n\n    if (flippedCards.length === 2) {\n      const flippedCardsMatch = checkCardMatch(flippedCards[0], flippedCards[1], cards);\n\n      if (flippedCardsMatch) {\n        reward.play();\n        setTimeout(() => {\n          setFlippedCard([]);\n          setMatchedCards([...matchedCards, ...flippedCards]);\n        }, 1000);\n      } else {\n        setTimeout(() => {\n          setFlippedCard([]);\n        }, 1000);\n      }\n    }\n\n    if (cards.length > 0 && matchedCards.length === cards.length) {\n      setTimeout(() => {\n        setMatchedCards([]);\n        setTimesWon(timesWon + 1);\n        setShowGame(false);\n      }, 1000);\n    }\n  }, [matchedCards, flippedCards, cards, timesWon, setCards]);\n\n  const startGame = () => {\n    setCards(generateStartingDeck);\n    setShowGame(true);\n    ambience.play();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"MeMOOry\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, showGame ? /*#__PURE__*/React.createElement(Board, {\n    cards: cards,\n    flippedCards: flippedCards,\n    matchedCards: matchedCards,\n    handleClickCard: handleClickCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, timesWon !== 0 && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 30\n    }\n  }, \" \", `You have now matched all the Moos ${timesWon} time${timesWon > 1 ? 's' : ''}!`), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Start matching Moos\"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hans.jorgen.ro/Documents/GitHub/memoory/src/App.js"],"names":["React","useState","useEffect","Board","shuffle","defaultCards","ambience","Audio","reward","generateStartingDeck","App","flippedCards","setFlippedCard","matchedCards","setMatchedCards","cards","setCards","showGame","setShowGame","timesWon","setTimesWon","handleClickCard","id","length","checkCardMatch","id1","id2","card1","find","card","card2","console","log","name","flippedCardsMatch","play","setTimeout","startGame"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport Board from './Components/Board'\nimport {shuffle} from './helpers.js'\n\nimport defaultCards from './initialData'\n\nconst ambience = new Audio(\"static/Sounds/Ambience.mp3\")\nconst reward = new Audio(\"static/Sounds/Reward.mp3\")\n\nconst generateStartingDeck = () => {\n  //Todo generate random cards \n  return  shuffle(defaultCards)\n}\n\nfunction App() {\n  const [ flippedCards, setFlippedCard ] = useState([])\n  const [ matchedCards, setMatchedCards ] = useState([])\n  const [ cards, setCards ] = useState([])\n  const [ showGame, setShowGame] = useState(false)\n  const [ timesWon, setTimesWon] = useState(0)\n\n  const handleClickCard = (id) => {\n    if (flippedCards.length < 2 ){\n      setFlippedCard([...flippedCards, id])\n    }\n  }\n\n  const checkCardMatch = (id1, id2, cards) => {\n    const card1 = cards.find(card => card.id === id1);\n    const card2 = cards.find(card => card.id === id2);\n    console.log(\"matchingCards\", card1, card2, card1.name === card2.name)\n    return card1.name === card2.name;\n  }\n\n  // Main game loop\n  useEffect(() => {\n    console.log(cards)\n    if(flippedCards.length === 2){\n      const flippedCardsMatch = checkCardMatch(flippedCards[0], flippedCards[1], cards)\n      if(flippedCardsMatch){\n        reward.play()\n        setTimeout(() => {\n          setFlippedCard([])\n          setMatchedCards([...matchedCards , ...flippedCards])\n        }, 1000)\n      }else{\n        setTimeout(() => {\n          setFlippedCard([])\n        }, 1000)\n      }\n    }\n    if( cards.length > 0 && matchedCards.length === cards.length){\n      setTimeout(() => {\n        setMatchedCards([]);\n        setTimesWon(timesWon + 1)\n        setShowGame(false);\n      }, 1000)\n    }\n\n  }, [matchedCards, flippedCards, cards, timesWon, setCards]);\n\n  const startGame = () =>{\n    setCards(generateStartingDeck)\n    setShowGame(true)\n    ambience.play()\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>MeMOOry</h1>\n      </header>\n      <div>\n        {showGame?\n          <Board \n            cards={cards}\n            flippedCards={flippedCards}\n            matchedCards={matchedCards}\n            handleClickCard={handleClickCard}\n          />\n        :\n          <div>\n          {timesWon !== 0 && <h2> {`You have now matched all the Moos ${timesWon} time${timesWon > 1 ?'s':''}!`}</h2> }\n          <button onClick={startGame}>Start matching Moos</button>\n          </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}